/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());

  let todoArray = [ {
    title: 'Item 1',
    completed: true,
    description: 'Item 1 Description',
    id: 1
  },
  {
    title: 'Item 2',
    completed: true,
    description: 'Item 2 Description',
    id: 2
  },
  {
    title: 'Item 3',
    completed: true,
    description: 'Item 3 Description',
    id: 3
  }
];
  let todoIdCount = todoArray.length;
  
  app.get("/todos", function(req, res){
    if (todoArray.length == 0) {
      res.status(200).json({
        msg: "No todos yet!"
      });
    } else {
      res.status(200).json(todoArray);
    }
  });

  app.get("/todos/:id", function(req, res){
    const id = req.params.id;
    let result = todoArray.find((element) => element.id == id);
    if (result) {
      res.status(200).json(result);
    } else {
      res.status(404).send("No such todo!");
    }
  })

  app.post("/todos", function(req, res){
    let todoObject = req.body;
    // :TODO: Validation Required!
    todoIdCount += 1
    todoObject = Object.assign({}, todoObject, { id: todoIdCount });
    todoArray.push(todoObject);
    res.status(201).json({msg: `Created new Todo with id: ${todoIdCount}`})
    console.log(todoArray)
  })

  app.put("/todos/:id", function(req, res) {
    let id = req.params.id;
    let requestedTodo = todoArray.find((element) => element.id == id);
    if (requestedTodo == undefined) {
      console.log("reached into 404");
      console.log("")
      res.status(404).send();
    } else {
      let newTodo = req.body;
      newTodo.id = +id;
      let index = todoArray.findIndex((element) => element.id == id);
      if (index != -1) {
        todoArray[index] = newTodo;
      }
      res.status(200).json({
        changedId: id,
        newTodoItem: todoArray[index]
      });
    }
  })

  app.delete("/todos/:id", function(req, res){
    let idToRemove = req.params.id;
    const indexToRemove = todoArray.findIndex((element) => element.id == idToRemove);
    if (indexToRemove !== -1) {
      const removalCandidate = todoArray[indexToRemove];
      todoArray.splice(indexToRemove, 1)
      res.status(200).json({
        msg: "Todo Object Removed",
        newTodoArray: todoArray
      });
    } else {
      res.status(404).send("No such Todo Object found!")
    }
  })

  app.listen(3000);  
  module.exports = app;